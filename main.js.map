{"version":3,"sources":["./projects/ngx-dom-navigator-demo/src/environments/environment.ts","./projects/ngx-dom-navigator-demo/src/app/app-routing.module.ts","./projects/ngx-dom-navigator-demo/src/app/app.component.ts","./projects/ngx-dom-navigator-demo/src/app/app.component.html","./projects/ngx-dom-navigator-demo/src/app/app.module.ts","./projects/ngx-dom-navigator/src/lib/interfaces/dom-navigator-settings.i.ts","./projects/ngx-dom-navigator/src/lib/dom-navigator.ts","./projects/ngx-dom-navigator/src/public-api.ts","./projects/ngx-dom-navigator-demo/src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { DomNavigator, DomNavigatorElement, DomNavigatorMode } from 'projects/ngx-dom-navigator/src/public-api';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'ngx-dom-navigator-demo';\n  codes = []\n  navigator: DomNavigator;\n  ngOnInit() {\n    for (let index = 0; index < 2000; index++) {\n      this.codes.push(index);\n    }\n\n    let container = document.querySelector('#context') as DomNavigatorElement;\n    // this.navigator = new DomNavigator(container, { mode: DomNavigatorMode.auto, selectedClassName: 'selected', ignoredClassList: ['ignored-class'] });\n    this.navigator = new DomNavigator(container, DomNavigator.DefaultSettings);\n    this.navigator.$selectionSubject.subscribe(r => {\n      console.log(r);\n    });\n\n  }\n\n  click(c) {\n    console.log(`Clicked: ${c}`);\n  }\n}\n","<style></style>\n<ul id=\"context\">\n\t<li\n\t\t(click)=\"click(code)\"\n\t\t*ngFor=\"let code of codes; let i = index\"\n\t\t[class]=\"i > 30 && i < 40 ? 'ignored-class' : ''\"\n\t>\n\t\t{{ code }}\n\t</li>\n</ul>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export interface DomNavigatorSettings {\n    mode?: DomNavigatorMode;\n    selectedClassName?: string;\n    left?: number;\n    up?: number;\n    right?: number;\n    down?: number;\n    cols?: number;\n    select?: number;\n    ignoredClassList?: Array<string>;\n}\n\nexport enum DomNavigatorMode {\n    auto = 1,\n    horizontal = 2,\n    vertical = 3,\n    grid = 4\n}","import { DomNavigatorMode, DomNavigatorSettings } from './interfaces/dom-navigator-settings.i';\nimport { DomNavigatorElement } from './interfaces/dom-navigator.element.i';\nimport { Subject } from 'rxjs';\n\nexport class DomNavigator {\n    private $doc: Document;\n    private settings: DomNavigatorSettings;\n    private $container: DomNavigatorElement;\n    private $keydownHandler;\n    private $keys: Array<Function>;\n    private $selected: HTMLLIElement;\n    private $ignoredClassList: Array<string>;\n    public $selectionSubject: Subject<any>;\n    constructor(container: DomNavigatorElement, settings: DomNavigatorSettings) {\n        this.$doc = window.document;\n        this.$container = container;\n        this.settings = DomNavigator.DefaultSettings;\n        Object.keys(settings).forEach(key => {\n            if (settings[key])\n                this.settings[key] = settings[key];\n        });\n        this.$ignoredClassList = settings.ignoredClassList ?? [];\n        this.init();\n    }\n\n    private inViewport(el) {\n        let rect = el.getBoundingClientRect();\n        return (\n            rect.top >= 0 &&\n            rect.left >= 0 &&\n            rect.bottom <= window.innerHeight &&\n            rect.right <= window.innerWidth\n        );\n    }\n\n    private unboxElement(obj) {\n        if (obj.jquery || Array.isArray(obj)) {\n            return obj[0];\n        }\n        return obj;\n    }\n\n    private absoluteOffsetTop(el) {\n        let offsetTop = 0;\n        do {\n            if (!isNaN(el.offsetTop)) {\n                offsetTop += el.offsetTop;\n            }\n        } while ((el = el.offsetParent));\n        return offsetTop;\n    }\n\n    /**\n     * Return the absolute offset left of an element.\n     *\n     * @param el {Element} The element.\n     *\n     * @return {Number} The offset left.\n     */\n    private absoluteOffsetLeft(el) {\n        let offsetLeft = 0;\n        do {\n            if (!isNaN(el.offsetLeft)) {\n                offsetLeft += el.offsetLeft;\n            }\n        } while ((el = el.offsetParent));\n        return offsetLeft;\n    }\n\n    private addClass(el, className) {\n        if (el.classList) {\n            el.classList.add(className);\n        } else {\n            el.className += ' ' + className;\n        }\n    }\n\n    private removeClass(el, className) {\n        if (el.classList) {\n            el.classList.remove(className);\n        } else {\n            el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n        }\n    }\n\n    /**\n     * Directions.\n     *\n     * @returns {{left: string, up: string, right: string, down: string}}\n     * @constructor\n     */\n    static get DIRECTION() {\n        return {\n            left: 'left',\n            up: 'up',\n            right: 'right',\n            down: 'down'\n        };\n    }\n\n    /**\n     * Default options.\n     *\n     * @returns {{mode: string, selected: string, left: number, up: number, right: number, down: number, cols: number}}\n     * @constructor\n     */\n    static get DefaultSettings(): DomNavigatorSettings {\n        return {\n            mode: DomNavigatorMode.auto,\n            selectedClassName: 'selected',\n            left: 37,\n            up: 38,\n            right: 39,\n            down: 40,\n            cols: 0,\n            select: 13,\n        };\n    }\n\n    /**\n     * Create a new DOM Navigator.\n     *\n     * @param container {Element} The container of the element to navigate.\n     * @param settings {Object} The options to configure the DOM navigator.\n     *\n     * @return void.\n     */\n\n    /**\n     * Initialize the navigator.\n     */\n    private init() {\n        this.validateOptions();\n        this.$selected = null;\n        this.$keydownHandler = null;\n\n        // Create hotkeys map.\n        this.$keys = []\n        this.$keys[this.settings.left] = this.left;\n        this.$keys[this.settings.up] = this.up;\n        this.$keys[this.settings.right] = this.right;\n        this.$keys[this.settings.down] = this.down;\n        this.$keys[this.settings.select] = this.triggerClick;\n\n        // Calculate cols if needed for grid mode.\n        if (this.settings.mode === DomNavigatorMode.grid && !this.settings.cols) {\n            let els = this.elements();\n            let count = [];\n            for (let i = 0; i < els.length; i++) {\n                if (i > 0 && count[i - 1] !== els[i].offsetTop) {\n                    break;\n                }\n                count[i] = els[i].offsetTop;\n            }\n            this.settings.cols = count.length;\n        }\n\n        this.enable();\n        this.$selectionSubject = new Subject();\n    }\n\n    /**\n     * Validate current options.\n     *\n     * @return void.\n     */\n    private validateOptions() {\n        let validMode = Object.values(DomNavigatorMode).includes(this.settings.mode);\n        if (!validMode) {\n            throw new Error('Unsupported navigation mode: ' + this.settings.mode);\n        }\n    }\n\n    /**\n     * Enable this navigator.\n     *\n     * @return void.\n     */\n    enable() {\n        let self = this;\n        this.$keydownHandler = function (event) {\n            self.handleKeydown.call(self, event);\n        };\n        this.$doc.addEventListener('keydown', this.$keydownHandler);\n    }\n\n    /**\n     * Disable this navigator.\n     *\n     * @return void.\n     */\n    disable() {\n        if (this.$keydownHandler) {\n            this.$doc.removeEventListener('keydown', this.$keydownHandler);\n        }\n        this.clearSelection();\n    }\n\n    clearSelection() {\n        this.$selected = null;\n    }\n\n    /**\n     * Destroy this navigator removing any event registered and any other data.\n     *\n     * @return void.\n     */\n    destroy() {\n        this.disable();\n        if (this.$container.domNavigator) {\n            delete this.$container.domNavigator;\n        }\n    }\n\n    /**\n     * Navigate left to the next element if any.\n     *\n     * @return void.\n     */\n    private left() {\n        let next = null;\n\n        switch (this.settings.mode) {\n\n            case DomNavigatorMode.auto:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                let left = this.$selected.offsetLeft - 1;\n                let top = this.$selected.offsetTop;\n\n                next = this.elementsBefore(left, Infinity).reduce((prev, curr) => {\n                    let currDistance = Math.abs(left - curr.offsetLeft) + Math.abs(top - curr.offsetTop);\n                    if (currDistance < prev.distance) {\n                        return {\n                            distance: currDistance,\n                            element: curr\n                        };\n                    }\n                    return prev;\n                }, {\n                    distance: Infinity\n                });\n                next = next.element;\n                break;\n\n            case DomNavigatorMode.horizontal:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                next = this.$selected.previousElementSibling;\n                break;\n\n            case DomNavigatorMode.vertical:\n                break;\n\n            case DomNavigatorMode.grid:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                let index = this.elements().indexOf(this.$selected);\n                if (index % this.settings.cols !== 0) {\n                    next = this.$selected.previousElementSibling;\n                }\n\n                break;\n        }\n\n        this.select(next, DomNavigator.DIRECTION.left);\n    }\n\n    /**\n     * Navigate up to the next element if any.\n     *\n     * @return void.\n     */\n    private up() {\n        let next = null;\n\n        switch (this.settings.mode) {\n\n            case DomNavigatorMode.auto:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                let left = this.$selected.offsetLeft;\n                let top = this.$selected.offsetTop - 1;\n\n                next = this.elementsBefore(Infinity, top).reduce((prev, curr) => {\n                    let currDistance = Math.abs(left - curr.offsetLeft) + Math.abs(top - curr.offsetTop);\n                    if (currDistance < prev.distance) {\n                        return {\n                            distance: currDistance,\n                            element: curr\n                        };\n                    }\n                    return prev;\n                }, {\n                    distance: Infinity\n                });\n\n                next = next.element;\n                break;\n\n            case DomNavigatorMode.horizontal:\n                break;\n\n            case DomNavigatorMode.vertical:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                let elToSelect = this.$selected.previousElementSibling;\n                var count = this.$container.childNodes.length;\n                let attempt = 0;\n                while (this.findCommonElement(elToSelect?.classList, this.$ignoredClassList)) {\n                    if (attempt == count) {\n                        break;\n                    }\n                    attempt++;\n                    elToSelect = elToSelect.previousElementSibling;\n                }\n\n                if (!elToSelect) {\n                    break;\n                }\n                next = elToSelect;\n                break;\n\n            case DomNavigatorMode.grid:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                next = this.$selected;\n                for (let i = 0; i < this.settings.cols; i++) {\n                    next = next && next.previousElementSibling;\n                }\n\n                break;\n        }\n\n        this.select(next, DomNavigator.DIRECTION.up);\n    }\n\n    /**\n     * Triggers click event of the selected element.\n     */\n    private triggerClick() {\n        this.$selected.click();\n    }\n\n    /**\n     * Navigate right to the next element if any.\n     *\n     * @return void.\n     */\n    private right() {\n        let next = null;\n\n        switch (this.settings.mode) {\n\n            case DomNavigatorMode.auto:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                let left = this.$selected.offsetLeft + this.$selected.offsetWidth;\n                let top = this.$selected.offsetTop;\n\n                next = this.elementsAfter(left, 0).reduce((prev, curr) => {\n                    let currDistance = Math.abs(curr.offsetLeft - left) + Math.abs(curr.offsetTop - top);\n                    if (currDistance < prev.distance) {\n                        return {\n                            distance: currDistance,\n                            element: curr\n                        };\n                    }\n                    return prev;\n                }, {\n                    distance: Infinity\n                });\n                next = next.element;\n                break;\n\n            case DomNavigatorMode.horizontal:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n                let elToSelect = this.$selected.nextElementSibling;\n                var count = this.$container.childNodes.length;\n                let attempt = 0;\n                while (this.findCommonElement(elToSelect?.classList, this.$ignoredClassList)) {\n                    if (attempt == count) {\n                        break;\n                    }\n                    attempt++;\n                    elToSelect = elToSelect.nextElementSibling;\n                }\n\n                if (!elToSelect) {\n                    break;\n                }\n                next = elToSelect;\n                break;\n\n            case DomNavigatorMode.vertical:\n                break;\n\n            case DomNavigatorMode.grid:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                let index = this.elements().indexOf(this.$selected);\n                if (index === 0 || (index + 1) % this.settings.cols !== 0) {\n                    next = this.$selected.nextElementSibling;\n                }\n\n                break;\n        }\n\n        this.select(next, DomNavigator.DIRECTION.right);\n    }\n\n    /**\n     * Navigate down to the next element if any.\n     */\n    private down() {\n        let next = null;\n\n        switch (this.settings.mode) {\n\n            case DomNavigatorMode.auto:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                let left = this.$selected.offsetLeft;\n                let top = this.$selected.offsetTop + this.$selected.offsetHeight;\n\n                next = this.elementsAfter(0, top).reduce((prev, curr) => {\n                    let currDistance = Math.abs(curr.offsetLeft - left) + Math.abs(curr.offsetTop - top);\n                    if (currDistance < prev.distance) {\n                        return {\n                            distance: currDistance,\n                            element: curr\n                        };\n                    }\n                    return prev;\n                }, {\n                    distance: Infinity\n                });\n                next = next.element;\n                break;\n\n            case DomNavigatorMode.horizontal:\n                break;\n\n            case DomNavigatorMode.vertical:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                let elToSelect = this.$selected.nextElementSibling;\n                var count = this.$container.childNodes.length;\n                let attempt = 0;\n                while (this.findCommonElement(elToSelect?.classList, this.$ignoredClassList)) {\n                    if (attempt == count) {\n                        break;\n                    }\n                    attempt++;\n                    elToSelect = elToSelect.nextElementSibling;\n                }\n\n                if (!elToSelect) {\n                    break;\n                }\n                next = elToSelect;\n                break;\n\n            case DomNavigatorMode.grid:\n                if (!this.$selected) {\n                    next = this.elements()[0];\n                    break;\n                }\n\n                next = this.$selected;\n                for (let i = 0; i < this.settings.cols; i++) {\n                    next = next && next.nextElementSibling;\n                }\n\n                break;\n        }\n\n        this.select(next, DomNavigator.DIRECTION.down);\n    }\n\n    /**\n     * Return the selected DOM element.\n     *\n     * @return {Element} The selected DOM element.\n     */\n    private selected() {\n        return this.$selected;\n    }\n\n    /**\n     * Select the given element.\n     *\n     * @param {Element} el The DOM element to select.\n     * @param {string} direction The direction.\n     * @return void\n     */\n    public select(el, direction) {\n        // Is there an element or is it selected?\n        if (!el || el === this.$selected) {\n            return; // Nothing to do here.\n        }\n        el = this.unboxElement(el);\n\n        // Unselect previous element.\n        if (this.$selected) {\n            this.removeClass(this.$selected, this.settings.selectedClassName);\n        }\n\n        // Scroll to given element.\n        this.scrollTo(el, direction);\n\n        // Select given element.\n        this.addClass(el, this.settings.selectedClassName);\n        this.$selected = el;\n        this.$selectionSubject.next(el);\n    }\n\n    /**\n     * Scroll the container to an element.\n     *\n     * @param el {Element} The destination element.\n     * @param direction {String} The direction of the current navigation.\n     *\n     * @return void.\n     */\n    private scrollTo(el, direction) {\n        el = this.unboxElement(el);\n        if (!this.inContainerViewport(el)) {\n            switch (direction) {\n                case DomNavigator.DIRECTION.left:\n                    this.$container.scrollLeft = el.offsetLeft - this.$container.offsetLeft;\n                    break;\n                case DomNavigator.DIRECTION.up:\n                    this.$container.scrollTop = el.offsetTop - this.$container.offsetTop;\n                    break;\n                case DomNavigator.DIRECTION.right:\n                    this.$container.scrollLeft = el.offsetLeft - this.$container.offsetLeft - (this.$container.offsetWidth - el.offsetWidth);\n                    break;\n                case DomNavigator.DIRECTION.down:\n                    this.$container.scrollTop = el.offsetTop - this.$container.offsetTop - (this.$container.offsetHeight - el.offsetHeight);\n                    break;\n            }\n        } else if (!this.inViewport(el)) {\n            switch (direction) {\n                case DomNavigator.DIRECTION.left:\n                    document.body.scrollLeft = this.absoluteOffsetLeft(el) - document.body.offsetLeft;\n                    break;\n                case DomNavigator.DIRECTION.up:\n                    document.body.scrollTop = this.absoluteOffsetTop(el) - document.body.offsetTop;\n                    break;\n                case DomNavigator.DIRECTION.right:\n                    document.body.scrollLeft = this.absoluteOffsetLeft(el) - document.body.offsetLeft - (document.documentElement.clientWidth - el.offsetWidth);\n                    break;\n                case DomNavigator.DIRECTION.down:\n                    document.body.scrollTop = this.absoluteOffsetTop(el) - document.body.offsetTop - (document.documentElement.clientHeight - el.offsetHeight);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Indicate if an element is in the container viewport.\n     *\n     * @param el {Element} The element to check.\n     *\n     * @return {Boolean} true if the given element is in the container viewport, otherwise false.\n     */\n    private inContainerViewport(el) {\n        el = this.unboxElement(el);\n        // Check on left side.\n        if (el.offsetLeft - this.$container.scrollLeft < this.$container.offsetLeft) {\n            return false;\n        }\n        // Check on top side.\n        if (el.offsetTop - this.$container.scrollTop < this.$container.offsetTop) {\n            return false;\n        }\n        // Check on right side.\n        if ((el.offsetLeft + el.offsetWidth - this.$container.scrollLeft) > (this.$container.offsetLeft + this.$container.offsetWidth)) {\n            return false;\n        }\n        // Check on down side.\n        if ((el.offsetTop + el.offsetHeight - this.$container.scrollTop) > (this.$container.offsetTop + this.$container.offsetHeight)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Return an array of the navigable elements.\n     *\n     * @return {Array} An array of elements.\n     */\n    private elements() {\n        let children = [];\n        for (let i = this.$container.children.length; i--;) {\n            // Skip comment nodes on IE8\n            if (this.$container.children[i].nodeType !== 8 && !this.findCommonElement(this.$container.children[i].classList, this.$ignoredClassList)) {\n                children.unshift(this.$container.children[i]);\n            }\n        }\n        return children;\n    }\n\n    private findCommonElement(array1, array2) {\n        // Loop for array1\n        for (let i = 0; i < array1.length; i++) {\n\n            // Loop for array2\n            for (let j = 0; j < array2.length; j++) {\n\n                // Compare the element of each and\n                // every element from both of the\n                // arrays\n                if (array1[i] === array2[j]) {\n\n                    // Return if common element found\n                    return true;\n                }\n            }\n        }\n\n        // Return if no common element exist\n        return false;\n    }\n\n    /**\n     * Return an array of navigable elements after an offset.\n     *\n     * @param {number} left The left offset.\n     * @param {number} top The top offset.\n     *\n     * @return {Array} An array of elements.\n     */\n    private elementsAfter(left, top) {\n        return this.elements().filter(el => el.offsetLeft >= left && el.offsetTop >= top);\n    }\n\n    /**\n     * Return an array of navigable elements before an offset.\n     *\n     * @param {number} left The left offset.\n     * @param {number} top The top offset.\n     *\n     * @return {Array} An array of elements.\n     */\n    private elementsBefore(left, top) {\n        return this.elements().filter(el => el.offsetLeft <= left && el.offsetTop <= top);\n    }\n\n    /**\n     * Handle the key down event.\n     *\n     * @param {Event} event The event object.\n     *\n     * @return void.\n     */\n    private handleKeydown(event): void {\n        if (this.$keys[event.which]) {\n            event.preventDefault();\n            this.$keys[event.which].call(this);\n        }\n    }\n}","/*\n * Public API Surface of ngx-dom-navigator\n * Author: Serhat KAYA github.com/serhatkaya\n * Version: 1.0.5-rela\n */\n\n\nexport * from './lib/dom-navigator';\nexport * from './lib/interfaces/dom-navigator-settings.i';\nexport * from './lib/interfaces/dom-navigator.element.i';\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}